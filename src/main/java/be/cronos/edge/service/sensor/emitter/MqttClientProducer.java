package be.cronos.edge.service.sensor.emitter;

import be.cronos.edge.service.StationConfiguration;
import io.vertx.core.Vertx;
import io.vertx.core.net.JksOptions;
import io.vertx.core.net.TrustOptions;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.enterprise.inject.Produces;

@RequiredArgsConstructor
public class MqttClientProducer {

    private static final Logger LOG = LoggerFactory.getLogger(MqttClientProducer.class);

    private final StationConfiguration stationConfiguration;
    private final Vertx vertx;

    private MqttClient client;

    @PostConstruct
    public void init() {
        LOG.debug("init mqtt client producer");
        MqttClientOptions options = new MqttClientOptions();
        options.setReconnectAttempts(-1);
        options.setCleanSession(true);
        options.setAutoKeepAlive(true);
        options.setAutoGeneratedClientId(stationConfiguration.getMqtt().getConnection().isGeneratedClientId());
        options.setSsl(stationConfiguration.getMqtt().getConnection().isSsl());
        options.setKeyCertOptions(getKeyCertOptions());
        options.setTrustOptions(getTrustOptions());
        options.setMaxInflightQueue(65535);
        client = MqttClient.create(vertx, options);
    }

    @Produces
    public MqttClient produceMqttClient(){
        LOG.debug("producing mqtt client");
        if (!client.isConnected()){
            connectClient();
        }
        return client;
    }

    @PreDestroy
    public void destroy(){
        LOG.debug("destroying mqtt client");
        if (client != null && client.isConnected()){
            client.disconnect();
        }
    }

    private JksOptions getKeyCertOptions() {
        String keystoreLocation = stationConfiguration.getMqtts().getKeystore().getPath();
        String keystorePassword = stationConfiguration.getMqtts().getKeystore().getPassword();
        return new JksOptions().setPath(keystoreLocation).setPassword(keystorePassword);
    }

    private TrustOptions getTrustOptions() {
        String truststoreLocation = stationConfiguration.getMqtts().getTruststore().getPath();
        String keystorePassword = stationConfiguration.getMqtts().getTruststore().getPassword();
        return new JksOptions().setPath(truststoreLocation).setPassword(keystorePassword);
    }

    public void connectClient(){
        LOG.debug("connecting to mqtt client");
        int port = stationConfiguration.getMqtt().getConnection().getPort();
        String host = stationConfiguration.getMqtt().getConnection().getHost();
        client = client.connect(port, host, null);
        LOG.debug("connected to mqtt client");
    }

}
